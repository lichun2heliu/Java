Mybatis
<![CDATA[<]]> <![CDATA[>]]>
Map<String, Object> map = page.getQueryCondition();
int count = sqlSession.selectOne("getUserCount",map);
List<User> list = sql.selectList("getUsers", map);
PagingEntity<User> page = new PagingEntity<User>(page.getPageNo(), count, page.getPageSize(), list);



Java多模块
http://blog.csdn.net/jrainbow/article/details/50546524
https://www.jianshu.com/p/da60dd691f96
http://blog.csdn.net/lwj_199011/article/details/54089305

unread
http://blog.csdn.net/u013378306/article/details/50805529
https://juejin.im/entry/57bbb8dc165abd00662b500d
http://blog.csdn.net/u012702547/article/details/77431765

mvn clean install -Dmaven.test.skip=true

logback日志
https://www.jianshu.com/p/f67c721eea1b

CodeReview

zheng项目学习
https://github.com/shuzheng/zheng

https://github.com/milanyangbo/permission

http://192.168.5.15:6015/swagger-ui.html 

jdk
https://www.processon.com/view/58df06fee4b071af473134c1


redis hash
http://blog.csdn.net/a1031397017/article/details/66978218
http://www.cnblogs.com/hongdada/p/5753407.html
redis-server --service-install redis.windows-service.conf --loglevel verbose
redis-server --service-install redis.windows-service.conf  --service-name Redis6380  --loglevel verbose


redis培训资料
https://wenku.baidu.com/view/4ffb6b4cdaef5ef7ba0d3ce2.html
https://wenku.baidu.com/view/c794fd2b7375a417866f8fad.html
https://wenku.baidu.com/view/db41936a284ac850ac024254.html
https://www.cnblogs.com/qkbao/p/6664757.html



mongodb find操作
http://blog.csdn.net/snails_zx/article/details/49911095



Docker命令：
Docke images
Docker run  "image ID"
Docker ps
Docker exec -it "containerID" /bin/bash
Docker stop 
docker rmi <image id>  删除镜像
docker tag IMAGEID(镜像id) REPOSITORY:TAG（仓库：标签）   --镜像tag重命名
docker run -d -p 8888:2001 phalaenopsis

Docker 软件包和依赖包已经包含在默认的 CentOS-Extras 软件源里，安装命令如下

/usr/local/apache-tomcat-8.0.45/webapps/



linux重启tomcat
cd /usr/local/tomcat/bin
./shutdown.sh       关闭tomcat命令
ps -ef|grep java      查看tomcat是否关闭
 kill -9 7010            强行kill命令
 ./startup.sh           启动tomcat命令



Google请求解释
https://www.cnblogs.com/Wayou/p/chrome-request-stalled-problem.html


apachejmeter使用教程

import org.slf4j.Logger;
import org.apache.log4j.Logger;
这两个区别


6380
prometheus + grafana


redis-server redis.windows.conf     redis启动命令
数据迁移
http://blog.csdn.net/huwei2003/article/details/50973967


memcache redis 区别
https://www.qcloud.com/community/article/164816001481011841
查询redis的处理能力
 redis-benchmark -h 192.168.100.131 -p 6379 -c 100 -n 100000


redis清空缓存数据：redis-cli       flushall
redis-cli -h 192.168.5.35 -p 6379


VisualVM插件地址
http://blog.csdn.net/keketrtr/article/details/74448127
https://jingyan.baidu.com/article/d5c4b52bebcb64da570dc571.html


jmap -dump:format=b,file=test1.bin 8768

CM
https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=CMMI%20CM&oq=%2526lt%253BMMI&rsv_pq=d1938e9c0000ef85&rsv_t=26298YUbIk84vNzvnPenvI%2Feue%2FhioZrAhRUNJpbLsrZiK8f%2Fw9FBibKuIM&rqlang=cn&rsv_enter=1&inputT=2099&rsv_sug3=9&rsv_sug1=8&rsv_sug7=100&rsv_sug2=0&rsv_sug4=3755



数据库连接池
http://blog.csdn.net/qq_31125793/article/details/51241943
durid
http://blog.csdn.net/hj7jay/article/details/51686418


<context:property-placeholder location="classpath:conf/config.properties" ignore-unresolvable="true" />


tomcat并发
http://blog.csdn.net/hll814/article/details/50935765
https://www.cnblogs.com/fupeng/p/6697938.html


服务埋点
Metrics
http://blog.csdn.net/zyt425916200/article/details/54392047
http://192.168.5.90:8000/page/index.html#/satelliteReport
http://blog.csdn.net/webhaifeng/article/details/50365794
/metrics-watcher/metrics-watcher.html



① 查看用户锁表
select sess.sid, 
sess.serial#, 
lo.oracle_username, 
lo.os_user_name, 
ao.object_name, 
lo.locked_mode 
from v$locked_object lo, 
dba_objects ao, 
v$session sess 
where ao.object_id = lo.object_id and lo.session_id = sess.sid

② 解锁语句
alter system kill session 'sid,serial#'


192.168.5.6
root 
kotei$88
CentOS 7


Spring security
Spring boot
Spring cloud

SET_METHODS.add("setString");
SET_METHODS.add("setInt");
SET_METHODS.add("setByte");
SET_METHODS.add("setShort");
SET_METHODS.add("setLong");
SET_METHODS.add("setDouble");
SET_METHODS.add("setFloat");
SET_METHODS.add("setTimestamp");
SET_METHODS.add("setDate");
SET_METHODS.add("setTime");
SET_METHODS.add("setArray");
SET_METHODS.add("setBigDecimal");
SET_METHODS.add("setAsciiStream");
SET_METHODS.add("setBinaryStream");
SET_METHODS.add("setBlob");
SET_METHODS.add("setBoolean");
SET_METHODS.add("setBytes");
SET_METHODS.add("setCharacterStream");
SET_METHODS.add("setClob");
SET_METHODS.add("setObject");
SET_METHODS.add("setNull");


List<String> strings = list.stream().map(DataDictionaryItem::getValue).collect(Collectors.toList());
map.put("VisibleValues", String.join("|",strings));



KMS配置文档地址：
http://192.168.20.66/redmine/projects/kms/knowledgebase/categories/55

http://blog.csdn.net/clementad/article/details/46474881


https://my.oschina.net
https://start.spring.io



springCloud 
http://blog.csdn.net/YLIMH_HMILY/article/details/



mybatis-spring-boot
http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/


有空学gradle

DESede/ECB/PKCS5Padding
第一段是加密算法的名称
第二段是分组加密的模式，除了CBC和ECB之外，还可以是NONE/CFB/QFB
第三段是指最后一个分组填充方式。



lombok
http://blog.csdn.net/ghsau/article/details/52334762

Swagger
http://blog.csdn.net/wangnan9279/article/details/44541665
http://blog.csdn.net/w4hechuan2009/article/details/68892718

https://vincentmi.gitbooks.io/spring-security-reference-zh/content/1_introduction.html



Log4j 日志等级
ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF

Logger 日志写出器，供程序员输出日志信息
Appender 日志目的地，把格式化好的日志信息输出到指定的地方去
Layout 日志格式化器，用来把程序员的 logging request格式化成字符串
log4j三个重要的组件构成：日志信息的优先级、日志输出目的地，格式信息的输出格式


Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron语法格式：
Seconds Minutes Hours DayofMonth Month DayofWeek Year
Seconds Minutes Hours DayofMonth Month DayofWeek
 每一个域可出现的字符如下：


Java线程池
http://ifeve.com/java-threadpool/
public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,
            BlockingQueue<Runnable> workQueue);
corePoolSize：核心池的大小
maximumPoolSize：线程池最大线程数
keepAliveTime：表示现场没有任务执行时最多保持多久
executor.execute()


Netty

ThreadStackSize 32位 JDK 1.6 默认的stacksize 325k 左右
1.可以采用基于JSON数据传输的RPC框架
2.可以使用NIO或直接使用Netty替代BIO实现
3.使用开源的序列化机制，如Hadoop Avro与Google protobuf等
4.服务注册可以使用Zookeeper进行管理，能够让应用更加稳定


CountDownLatch是通过一个计数器来实现的，计数器的初始值为线程的数量。每当一个现场完成了自己的任务后，计数器的值就会减1.当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务


Jetty 9.4.6.v20170531

mongodb
http://www.cnblogs.com/hugo-zhangzhen/archive/2017/02/28/6479218.html

Intellij 创建Maven项目 Spring MVC
http://www.cnblogs.com/Sinte-Beuve/p/5730553.html


Intellij 创建boot项目
http://www.cnblogs.com/winner-0715/p/6666302.html


Spring boot 中文文档
http://download.csdn.net/download/moshenglv/9712700

java lambda 表达式
http://blog.csdn.net/renfufei/article/details/24600507/
https://www.mkyong.com/java8/java-8-streams-filter-examples/

https://zeroturnaround.com/rebellabs/java-8-explained-applying-lambdas-to-java-collections/

Intellij Idea 集成 mybatis generator
http://blog.csdn.net/noaman_wgs/article/details/54409301


Maven Plugin
http://www.cnblogs.com/crazy-fox/archive/2012/02/09/2343722.html

tomcat设置jdk路径
http://blog.csdn.net/a597926661/article/details/8558342


classpath 和 classpath* 区别：
classpath:只会到你的class路径中查找找文件
classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找.


<dependency>
	<groupId>org.eclipse.jetty.websocket</groupId>
	<artifactId>websocket-server</artifactId>
	<version>9.3.3.v20150827</version>
	<scope>provided</scope>
</dependency>

sdo_geometry
(2001,---2001代表单点
null,
sdo_point_type
(
117.817231991035,
36.202853347526,
null),
null,
null
)


Maven相关操作
创建一个简单的Java工程：mvn archetype:create -DgroupId=com.mycompany.example -DartifactId=Example
创 建一个java的web工程：mvn archetype:create -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DgroupId=com.mycompany.app -DartifactId=my-webapp
打包：mvn package
编译：mvn compile
编译测试程序：mvn test-compile
清空：mvn clean
运行测试：mvn test
生成站点目录: mvn site
生成站点目录并发布：mvn site-deploy
安装当前工程的输出文件到本地仓库: mvn install
安 装指定文件到本地仓库：mvn install:install-file -DgroupId=<groupId> -DartifactId=<artifactId> -Dversion=1.0.0 -Dpackaging=jar -Dfile=<myfile.jar>
查看实际pom信息: mvn help:effective-pom
分析项目的依赖信息：mvn dependency:analyze 或 mvn dependency:tree
跳过测试运行maven任务：    mvn -Dmaven.test.skip=true XXX
生成eclipse项目文件: mvn eclipse:eclipse
查看帮助信息：mvn help:help 或 mvn help:help -Ddetail=true
查看插件的帮助信息：mvn <plug-in>:help，比如：mvn dependency:help 或 mvn ant:help 等等
编译指定模块
mvn clean install -pl module1  -am


192.168.5.5 root kotei$88
CentOS 7

gulp 压缩js


历下
37010201
中区国土
37010301
槐荫
37010401
天桥
37010501
历城区
37011201
长清区
37011305
平阴县
37012401
济阳县
37012502
商河县
37012601
章丘区
37018101
济南高新技术产业开发
370100101

济南市
37010001

济宁市兖州区
37088201


%c 输出日志信息所属的类的全名
%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28
%f 输出日志信息所属的类的类名
%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行
%m 输出代码中指定的信息，如log(message)中的message
%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推
%r 输出自应用启动到输出该日志信息所耗费的毫秒数
%t 输出产生该日志事件的线程名


log4j日志存储到数据库
https://www.cnblogs.com/mophy/p/6444760.html


Jenkins  http://localhost:8080/
用户名密码：admin admin


mock 单元测试
http://blog.csdn.net/zhang289202241/article/details/62042842?locationNum=9&fps=1


mvn sonar:sonar \
  -Dsonar.host.url=http://localhost:9000 \
  -Dsonar.login=a6709e624ce59d769bfe096861ef047ffe4b4b6b


Java分 强引用、软引用、弱引用、虚引用。善于利用软引用和弱引用来有效避免OOM（OutOfMemory）

mysql 密码 8888888

spring boot 命令
$ mvn spring-boot:run
 mvn package
jar tvf target/myproject-0.0.1-SNAPSHOT.jar
java -jar target/myproject-0.0.1-SNAPSHOT.jar


@SpringBootApplication(scanBasePackages = {})

打印GC信息：-Xmx5M -XX:+PrintGCDetails 
GC 专题 http://blog.csdn.net/column/details/14851.html



jetty 开启方式
1,打开D:\jetty-distribution-9.2.20.v20161216\demo-baseshift+鼠标右键“在此处打开命令窗口”
2,命令窗口输入启动jetty命令   java-jar ../start.jar
3,使用命令修改端口 java -jar ../start.jar jetty.port=8084


Movk
http://blog.csdn.net/zhang289202241/article/details/62042842?locationNum=9&fps=1


if (maxExtent.__proto__.hasOwnProperty('contains')) 
判断一个对象是否有此方法


RollingFileAppender和DailyRollingFileAppender两种方式将日志记录输出到文件。RollingFileAppender按log文件最大长度限度生成新文件，DailyRollingFileAppender按日期生成新文件。



java工程导出javadoc
1、选中项目，然后选project->Generate javadoc...，弹出setting对话框。在javadoc command地方选jdk\bin\javadoc.exe
如C:\jdk1.6\bin\javadoc.exe，visibility可以自己设，一般选public，输出路径自己选。
2、点next，下一步基本不需要设。
3、再点next，这里要在extra javadoc options地方设定编码，不设的话中文会有乱码。如我的是utf-8，则为
-encoding UTF-8
-charset UTF-8
点finish就可以输出java doc了。



redis 端口号 6379


immoc 学习资料 https://github.com/zccodere/study-imooc



gitlab 地址：
http://192.168.5.73/
域账号和密码
记住账号
[系统盘]:\Users[你的用户名]下面，有一个.gitconfig目录，这个是记录你的git配置信息的。
在该文件后面加上
[credential]
    helper = store


spring socket
http://blog.csdn.net/gisredevelopment/article/details/38392629

RFC定义的webSocket
https://tools.ietf.org/html/rfc6455


Jenkins 自动部署
http://blog.csdn.net/wangmuming/article/details/22925127/


<Context docBase="Phalaenopsis" path="/" reloadable="true" source="org.eclipse.jst.j2ee.server:Phalaenopsis"/>


mybatis 枚举作为参数
https://stackoverflow.com/questions/12933813/using-enum-parameters-in-mybatis-dynamic-sql/12933815
https://stackoverflow.com/questions/10562895/enum-constant-in-mybatiss-sql-query


http://localhost:8200/HelloWorld-MVC-Swagger/swagger/index.html

https://github.com/xujiu/Spring-MVC-Swagger-demo



redis学习篇
1,先启动服务端

2,启动客户端
切换到redis目录下运行 redis-cli.exe -h 127.0.0.1 -p 6379 。
设置键值对 set myKey abc
取出键值对 get myKey

3，SET name "runoob" 设置用户

http://blog.csdn.net/java2000_wl/article/details/8543203/

http://blog.csdn.net/evankaka/article/details/50396325

http://www.cnblogs.com/liuling/p/2014-4-19-04.html

https://github.com/spring-projects/spring-data-redis

设置redis开机启动
http://blog.csdn.net/u010982856/article/details/51658184


redis json 序列化
http://blog.csdn.net/supermancoke/article/details/70053421


private static org.slf4j.Logger logger = LoggerFactory.getLogger(AuthController.class);

C 语言基本数据类型
short、int、long、char、float、double


http://blog.csdn.net/neosmith/article/details/43955963
CRUD
http://blog.csdn.net/guoshengkai373/article/details/51461242

msconfig 设置开机启动项

--可以借鉴的类
SpringContextHolder
SpringHelper

https://github.com/shuzheng/zheng
深入理解mybatis原理 http://blog.csdn.net/luanlouis/article/details/37744073
https://github.com/tuguangquan/mybatis/blob/master/src/main/java/org/apache/ibatis/binding/MapperRegistry.java



angular.element($0).scope()


https://wenku.baidu.com/

http://mvnrepository.com/
http://www.runoob.com
http://www.apjs.net/
http://www.oschina.net/
http://www.ehcache.org/
http://www.mybatis.org


RPC
http://www.importnew.com/20327.html


http://my.csdn.net/u010349169

tree /f >>2.txt


SPring Quartz 调度器 Cron表达式
秒（0~59）
分钟 （0~59）
小时  （0~23）
天（月）   （0~31，但是你需要考虑你月的天数）
月 （0~11）
天（星期） （1~7 1=SUN 或 SUN, MON, TUE, WED, THU, FRI, SAT）
年份（1970~2099）


mybatis存储过程
https://my.oschina.net/lujianing/blog/296427

武汉执法系统：
http://192.168.5.137:8019      xxzx 8888888

mybatis 
一对多:
http://brianway.github.io/2016/03/08/mybatis-learn-11-one-to-many/
一对一
http://brianway.github.io/2016/03/08/mybatis-learn-10-one-to-one/

动态SQL
http://www.cnblogs.com/zhangminghui/p/4903351.html

https://www.oschina.net/p/iBase4J



<foreach collection="list"  item="item"   open="("  	separator="," close=")"></foreach>

<resultMap type="java.util.Map" id="resultjcm">  
  <result property="FLD_NUMBER" column="FLD_NUMBER"  javaType="double" jdbcType="NUMERIC"/>  
  <result property="FLD_VARCHAR" column="FLD_VARCHAR" javaType="string" jdbcType="VARCHAR"/>  
  <result property="FLD_DATE" column="FLD_DATE" javaType="java.sql.Date" jdbcType="DATE"/>  
  <result property="FLD_INTEGER" column="FLD_INTEGER"  javaType="int" jdbcType="INTEGER"/>  
  <result property="FLD_DOUBLE" column="FLD_DOUBLE"  javaType="double" jdbcType="DOUBLE"/>  
  <result property="FLD_LONG" column="FLD_LONG"  javaType="long" jdbcType="INTEGER"/>  
  <result property="FLD_CHAR" column="FLD_CHAR"  javaType="string" jdbcType="CHAR"/>  
  <result property="FLD_BLOB" column="FLD_BLOB"  javaType="[B" jdbcType="BLOB" />  
  <result property="FLD_CLOB" column="FLD_CLOB"  javaType="string" jdbcType="CLOB"/>  
  <result property="FLD_FLOAT" column="FLD_FLOAT"  javaType="float" jdbcType="FLOAT"/>  
  <result property="FLD_TIMESTAMP" column="FLD_TIMESTAMP"  javaType="java.sql.Timestamp" jdbcType="TIMESTAMP"/>  
 </resultMap> 




java调ArcGis Server Rest API
http://www.cnblogs.com/esrichina/archive/2013/02/01/2889224.html


<foreach collection="list" item="item" index="index" open="(" separator="," close=")">
		#{item}
</foreach> 



mybatis execute multiple SQL in one map
<delete id="deleteUnfinishedData" parameterType="map">
    {call
        declare
        begin
            delete from TABLE1 where id = #{valueFromMap1};
            delete from TABLE2 where id = #{valueFromMap2};
        end
    }
</delete>


@Select(value= "{ CALL getTotalCityStateId()}")
@Options(statementType = StatementType.CALLABLE)
@ResultType(State.class)
@Results(
{   
 @Result(property="id", column="state_id"),
 @Result(property="name", column="state_name"),
 @Result(property="code", column="state_code"),
})
List<State> callGetStatesAnnotations();


Java基本类型有：byte、short、int、long、float、double、boolean、char

Resource resource = new ClassPathResource("conf/**.xml")
读取classPath下的资源文件


SpringMVC随时随地地获取HttpServletRequest等对象
http://www.cnblogs.com/shangxiaofei/p/5900352.html
HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();

SQL语句构建器类



http://localhost:8080/Phalaenopsis/

http://blog.csdn.net/lovesummerforever/article/details/26396465


http://blog.csdn.net/bnna8356586/article/details/51406459

集合相互转换的例子
http://www.cnblogs.com/sophie_wang/archive/2010/05/25/1743612.html

http://www.cnblogs.com/davidwang456/p/3891460.html

加解密：
DES 密钥和偏移量
RSA 非对称

Java虚拟机：
HotSpot  maxPermSize=128M





































